/* Approach - 1  */
class Solution {
public:
    string res;

    bool smallest(string &s1, string &s2) {
        int i = 0, j = 0;
        while(i < s1.size() && j < s2.size()) {
            if(s1[i] < s2[j]) {
                return true;
            }else if(s1[i] > s2[j]) {
                return false;
            }
            i++,j++;
        }
        if (s1.size() <= s2.size()) return true;
        
        return false;
    }   

    void dfs(TreeNode* root, string s) {
        if (root == NULL) return;
        s += 'a' + root->val;
        if (!root->left && !root->right) {
            string tmp = s;
            reverse(tmp.begin(),tmp.end());
            if (res == "") {
                res = tmp;
            }else {
                cout << tmp << " " << res << endl;
                if(smallest(tmp, res)) {
                    res = tmp;
                }else {
                    return;
                }
            }
        }

        dfs(root->left,s);
        dfs(root->right,s);
    }

    string smallestFromLeaf(TreeNode* root) {
        res = "";
        dfs(root,"");
        return res;
    }
};

*****************************************************************************************************************************************************************************
Approach - II
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string res;

    void dfs(TreeNode* root, string s) {
        if (root == NULL) return;
        s = char('a' + root->val) + s;
        if (!root->left && !root->right) {
            string tmp = s;
            if (res == "" || s < res) {
                res = s;
            }
        }
        dfs(root->left,s);
        dfs(root->right,s);
    }

    string smallestFromLeaf(TreeNode* root) {
        cin.tie(0);
        cout.tie(0);
        ios_base::sync_with_stdio(0);
        res = "";
        dfs(root,"");
        return res;
    }
};
