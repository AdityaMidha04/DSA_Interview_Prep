/* If you know what info. needed to be passed to the parent node then you can solve many tree questions easily */
/* TC : O(N * M^2) || SC : O(N * M) */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countGoodPairs;

    vector<int> dfs(TreeNode* root, int d) {
        if (root == NULL) return {};
        if (root->left == NULL && root->right == NULL) return {1};

        vector<int> vLeft = dfs(root->left,d);
        vector<int> vRight = dfs(root->right,d);

        for (auto x : vLeft) {
            for (auto y : vRight) {
                if (x + y <= d) countGoodPairs++;
            }
        }
        vector<int> parent;
        for (auto x : vLeft) {
            if (x + 1 < d) parent.push_back(x+1);
        }
        for (auto y : vRight) {
            if (y + 1 < d) parent.push_back(y+1);
        }

        return parent;
    }


    int countPairs(TreeNode* root, int distance) {
        countGoodPairs = 0;
        dfs(root,distance);
        return countGoodPairs;
    }
};
