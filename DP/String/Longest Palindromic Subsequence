/* LPS(s) = LCS(s, reverse(s))  */

class Solution {
public:
    int longestPalindromeSubseq(string s) {
        cin.tie(0);
        cout.tie(0);
        ios_base::sync_with_stdio(0);
        string b = s;
        reverse(b.begin(),b.end());
        int m = s.size();
        
        vector<vector<int>> t(m+1,vector<int>(m+1,-1));
        for(int i=0;i<m+1;i++) {
            for(int j=0;j<m+1;j++) {
                if(i==0 || j==0) t[i][j]=0;
            }
        }

        for(int i=1;i<m+1;i++) {
            for(int j=1;j<m+1;j++) {
                if(s[i-1]==b[j-1]) {
                    t[i][j]=1+t[i-1][j-1];
                }else{
                    t[i][j] = max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        return t[m][m];
    }
};
